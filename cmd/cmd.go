// Package cmd
// descr 存放程序的所有子命令
// author fm
// date 2022/11/22 13:56
package cmd

import (
	"os"

	"gohub-lesson/pkg/helpers"

	"github.com/spf13/cobra"
)

// cobra：重点关注 cobra 命令的钩子
// 钩子说明
// The *Run 函数运行顺序：
//   * PersistentPreRun()
//   * PreRun()
//   * Run()
//   * PostRun()
//   * PersistentPostRun()
// 会被子命令继承的前置 Run
// PersistentPreRun func(cmd *Command, args []string)
// // 会被子命令继承的前置 Run, 带 error
// PersistentPreRunE func(cmd *Command, args []string) error
// // 当前这个命令的前置 Run
// PreRun func(cmd *Command, args []string)
// // 当前这个命令的前置 Run，带 Error
// PreRunE func(cmd *Command, args []string) error
// // zh: 实际跑的时候运行的函数
// Run func(cmd *Command, args []string)
// // zh: Run 执行错误了之后
// RunE func(cmd *Command, args []string) error
// // 后置运行
// PostRun func(cmd *Command, args []string)
// // 后置运行，带 error
// PostRunE func(cmd *Command, args []string) error
// // 会被子命令继承的后置运行
// PersistentPostRun func(cmd *Command, args []string)
// // 会被子命令继承的后置运行，带 error
// PersistentPostRunE func(cmd *Command, args []string) error

// Command 代表执行命令的结构
// cobra.Command 结构体属性说明
// type Command struct {
// 	// 代表当前命令的，如何执行，root 最好和生成的命令工具名称一致
// 	Use string
//
// 	// 代表这个工具的别名，在 subCommand 中有用，比如 root cmd1 和 root cmd_1 想要都执行一个 subCommand 就需要这样
// 	Aliases []string
//
// 	// 由于不强制设置，用于输入错误的时候建议字段
// 	SuggestFor []string
//
// 	// 这个就是在 help 的时候一句话描述这个命令的功能
// 	Short string
//
// 	// 详细描述这个命令的功能
// 	Long string
//
// 	// 例子，调用示例
// 	Example string
//
// 	// 参数白名单（非 flag），只允许传这里定制的参数
// 	// 此处的参数被被自动补全
// 	ValidArgs []string
//
// 	// 参数验证器（可设置不接受参数，或者最多、最少参数）
// 	Args PositionalArgs
//
// 	// 参数别名
// 	ArgAliases []string
//
// 	// 自动补全的命令设置，只能在 root 命令设置
// 	BashCompletionFunction string
//
// 	// 如果这个命令已经废弃了，那么就这里写上废弃信息
// 	Deprecated string
//
// 	// 如果这个命令要被隐藏，设置这个字段
// 	Hidden bool
//
// 	// 设置命令分组注释
// 	Annotations map[string]string
//
// 	// 设置命令的版本
// 	Version string
//
// 	// The *Run 函数运行顺序：
// 	//   * PersistentPreRun()
// 	//   * PreRun()
// 	//   * Run()
// 	//   * PostRun()
// 	//   * PersistentPostRun()
// 	// 会被子命令继承的前置 Run
// 	PersistentPreRun func(cmd *Command, args []string)
// 	// 会被子命令继承的前置 Run, 带 error
// 	PersistentPreRunE func(cmd *Command, args []string) error
// 	// 当前这个命令的前置 Run
// 	PreRun func(cmd *Command, args []string)
// 	// 当前这个命令的前置 Run，带 Error
// 	PreRunE func(cmd *Command, args []string) error
// 	// zh: 实际跑的时候运行的函数
// 	Run func(cmd *Command, args []string)
// 	// zh: Run 执行错误了之后
// 	RunE func(cmd *Command, args []string) error
// 	// 后置运行
// 	PostRun func(cmd *Command, args []string)
// 	// 后置运行，带 error
// 	PostRunE func(cmd *Command, args []string) error
// 	// 会被子命令继承的后置运行
// 	PersistentPostRun func(cmd *Command, args []string)
// 	// 会被子命令继承的后置运行，带 error
// 	PersistentPostRunE func(cmd *Command, args []string) error
//
// 	// 是否要打印错误信息
// 	SilenceErrors bool
//
// 	// 是否关闭使用建议（当命令不存在，或参数有误时）
// 	SilenceUsage bool
//
// 	// 是否有 flag，如果这个命令没有 flag，设置为 true，那么所有的命令后面的参数都会是 arguments
// 	DisableFlagParsing bool
//
// 	// 生成文档时，是否打印自动生成字样： ("Auto generated by spf13/cobra...")
// 	DisableAutoGenTag bool
//
// 	// 是否显示[flags]字样
// 	DisableFlagsInUseLine bool
//
// 	// 是否打印建议，当命令行出错时，匹配字数，然后给出建议的命令，提高用户体验
// 	DisableSuggestions bool
//
// 	// 多少个字才会触发 suggest，必须大于 0
// 	SuggestionsMinimumDistance int
//
// 	// 是否使用 Traverse 的方式来解析参数
// 	TraverseChildren bool
//
// 	// 解析错误白名单, 比如像未知参数
// 	FParseErrWhitelist FParseErrWhitelist
// }

// Env 存储全局选项 --env 的值
var Env string

// RegisterGlobalFlags 注册全局选项（flag）
func RegisterGlobalFlags(rootCmd *cobra.Command) {
	rootCmd.PersistentFlags().StringVarP(&Env, "env", "e", "", "load .env file, example: --env=testing will use .env.testing file")
}

// RegisterDefaultCmd 注册默认命令
func RegisterDefaultCmd(rootCmd *cobra.Command, subCmd *cobra.Command) {
	cmd, _, err := rootCmd.Find(os.Args[1:])
	firstArg := helpers.FirstElement(os.Args[1:])
	if err == nil && cmd.Use == rootCmd.Use && firstArg != "-h" && firstArg != "--help" {
		args := append([]string{subCmd.Use}, os.Args[1:]...)
		rootCmd.SetArgs(args)
	}
}
